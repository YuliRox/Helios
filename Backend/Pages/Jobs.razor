@page "/jobs"
@using Helios.Data
@inject ScheduledEventService ScheduledEventService

<PageTitle>Job Management</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Job Management</MudText>

@if (scheduledEvents == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="scheduledEvents" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ScheduledEvent, object>(x=>x?.ActivationTime)">ActivationTime</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ScheduledEvent, object>(x=>x?.DeactivationTime)">DeactivationTime</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ScheduledEvent, object>(x=>x.GroupName)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ScheduledEvent, object>(x=>x.CronExpressionOn)">Cron for On</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ScheduledEvent, object>(x=>x.CronExpressionOff)">Cron for Off</MudTableSortLabel></MudTh>
            <MudTh>Day of Week</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Activation Time">@context.ActivationTime</MudTd>
            <MudTd DataLabel="Deactivation Time">@context.DeactivationTime</MudTd>
            <MudTd DataLabel="Name">@context.GroupName</MudTd>
            <MudTd DataLabel="CronExpressionOn">@context.CronExpressionOn</MudTd>
            <MudTd DataLabel="CronExpressionOff">@context.CronExpressionOff</MudTd>
            <MudTd DataLabel="Day of Week">@string.Join(", ", @context.DayOfWeek)</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private ScheduledEvent[]? scheduledEvents;

    protected override async Task OnInitializedAsync()
    {
        scheduledEvents = await ScheduledEventService.GetScheduledAsync();
    }
}