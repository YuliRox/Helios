@page "/jobs"
@using Helios.Data
@inject ScheduledEventService ScheduledEventService

<PageTitle>Job Management</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Job Management</MudText>

@if (scheduledEvents == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudStack>
        @foreach (var scheduledEvent in scheduledEvents)
        {
            <MudItem>
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@scheduledEvent.GroupName</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudSwitch T="bool" CheckedChanged="(value) => Toggle(value, scheduledEvent)" Checked="scheduledEvent.IsActive" Color="Color.Secondary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <!--<MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                    </MudCardActions>-->
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="4">
                                <MudField Label="Activation Time" AdornmentIcon="@Icons.Material.Filled.WbSunny" AdornmentColor="Color.Warning" Adornment="Adornment.End">
                                    <InputDate TValue="TimeOnly" Type="InputDateType.Time"
                                               ValueChanged="(newValue) => ActivationTimeChanged(newValue, scheduledEvent)"
                                               ValueExpression="() => scheduledEvent.ActivationTime"
                                               Value="scheduledEvent.ActivationTime" />
                                </MudField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudField Label="Deactivation Time" AdornmentIcon="@Icons.Material.Filled.NightsStay" AdornmentColor="Color.Dark" Adornment="Adornment.End">
                                    <InputDate TValue="TimeOnly" Type="InputDateType.Time"
                                               ValueChanged="(newValue) => DeactivationTimeChanged(newValue, scheduledEvent)"
                                               ValueExpression="() => scheduledEvent.DeactivationTime"
                                               Value="scheduledEvent.DeactivationTime" />
                                </MudField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudStack>
}

@code {
    private ScheduledEvent[]? scheduledEvents;

    protected override async Task OnInitializedAsync()
    {
        scheduledEvents = await ScheduledEventService.GetScheduledAsync();
    }

    public async Task Toggle(bool newValue, ScheduledEvent evt)
    {
        await ScheduledEventService.TogglePauseStatus(evt);
        if (evt.IsActive != newValue)
        {
            Console.Error.WriteLine($"Active value is not the same for {evt.GroupName}");
        }
    }

    public async Task ActivationTimeChanged(TimeOnly newTime, ScheduledEvent evt)
    {
        if (newTime >= evt.DeactivationTime)
            evt.DeactivationTime = newTime.AddMinutes(30);

        evt.ActivationTime = newTime;

        await ScheduledEventService.UpdateTimes(evt);
    }

    public async Task DeactivationTimeChanged(TimeOnly newTime, ScheduledEvent evt)
    {
        if (newTime <= evt.ActivationTime)
            evt.ActivationTime = newTime.AddMinutes(-30);

        evt.DeactivationTime = newTime;

        await ScheduledEventService.UpdateTimes(evt);
    }
}